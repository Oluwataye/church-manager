
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://fkdxwjbcfybypsotmqvn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZrZHh3amJjZnlieXBzb3RtcXZuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg2OTIxNzAsImV4cCI6MjA1NDI2ODE3MH0.UFlEMCE1JgKc5pShks2fxaxDbwsM1jp7bFNaN83yCxg";

// Check if we're running in Electron
const isElectron = typeof window !== 'undefined' && window.electronAPI?.isElectron;
const API_BASE_URL = isElectron ? window.electronAPI?.apiBaseUrl : '';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  }
});

// Create a local API client for Electron mode
export const localApi = {
  from: (table) => {
    return {
      select: (columns = '*') => {
        return {
          order: (column, { ascending = true } = {}) => {
            return {
              limit: (limit) => {
                return {
                  single: async () => {
                    try {
                      const response = await fetch(`${API_BASE_URL}/${table}?limit=1`);
                      const data = await response.json();
                      return { data: data[0] || null, error: null };
                    } catch (error) {
                      return { data: null, error };
                    }
                  },
                  eq: async (column, value) => {
                    try {
                      const response = await fetch(`${API_BASE_URL}/${table}?${column}=${value}&limit=${limit}`);
                      const data = await response.json();
                      return { data, error: null };
                    } catch (error) {
                      return { data: null, error };
                    }
                  },
                  execute: async () => {
                    try {
                      const response = await fetch(`${API_BASE_URL}/${table}?limit=${limit}`);
                      const data = await response.json();
                      return { data, error: null };
                    } catch (error) {
                      return { data: null, error };
                    }
                  }
                };
              },
              execute: async () => {
                try {
                  const response = await fetch(`${API_BASE_URL}/${table}`);
                  const data = await response.json();
                  return { data, error: null };
                } catch (error) {
                  return { data: null, error };
                }
              }
            };
          },
          eq: async (column, value) => {
            try {
              const response = await fetch(`${API_BASE_URL}/${table}?${column}=${value}`);
              const data = await response.json();
              return { data, error: null };
            } catch (error) {
              return { data: null, error };
            }
          },
          execute: async () => {
            try {
              const response = await fetch(`${API_BASE_URL}/${table}`);
              const data = await response.json();
              return { data, error: null };
            } catch (error) {
              return { data: null, error };
            }
          }
        };
      },
      insert: (values) => {
        return {
          select: () => {
            return {
              single: async () => {
                try {
                  const response = await fetch(`${API_BASE_URL}/${table}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(values)
                  });
                  const data = await response.json();
                  return { data, error: null };
                } catch (error) {
                  return { data: null, error };
                }
              },
              execute: async () => {
                try {
                  const response = await fetch(`${API_BASE_URL}/${table}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(values)
                  });
                  const data = await response.json();
                  return { data, error: null };
                } catch (error) {
                  return { data: null, error };
                }
              }
            };
          },
          execute: async () => {
            try {
              const response = await fetch(`${API_BASE_URL}/${table}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(values)
              });
              const data = await response.json();
              return { data, error: null };
            } catch (error) {
              return { data: null, error };
            }
          }
        };
      },
      update: (values) => {
        return {
          eq: async (column, value) => {
            try {
              const response = await fetch(`${API_BASE_URL}/${table}/${value}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(values)
              });
              const data = await response.json();
              return { data, error: null };
            } catch (error) {
              return { data: null, error };
            }
          }
        };
      },
      delete: () => {
        return {
          eq: async (column, value) => {
            try {
              const response = await fetch(`${API_BASE_URL}/${table}/${value}`, {
                method: 'DELETE'
              });
              const data = await response.json();
              return { data, error: null };
            } catch (error) {
              return { data: null, error };
            }
          }
        };
      }
    };
  },
  auth: {
    signInWithPassword: async ({ email, password }) => {
      try {
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password })
        });
        const result = await response.json();
        
        if (!result.success) {
          return { data: null, error: new Error(result.error) };
        }
        
        return { 
          data: { 
            user: result.user,
            session: { user: result.user }
          }, 
          error: null 
        };
      } catch (error) {
        return { data: null, error };
      }
    },
    signUp: async ({ email, password }) => {
      try {
        const response = await fetch(`${API_BASE_URL}/auth/register`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password })
        });
        const result = await response.json();
        
        if (!result.success) {
          return { data: null, error: new Error(result.error) };
        }
        
        return { 
          data: { 
            user: result.user,
            session: { user: result.user }
          }, 
          error: null 
        };
      } catch (error) {
        return { data: null, error };
      }
    },
    getSession: async () => {
      const currentUserStr = localStorage.getItem('currentUser');
      if (!currentUserStr) {
        return { data: { session: null }, error: null };
      }
      
      const currentUser = JSON.parse(currentUserStr);
      return { 
        data: { 
          session: { 
            user: currentUser 
          } 
        }, 
        error: null 
      };
    },
    onAuthStateChange: (callback) => {
      // This is a simplified version that doesn't actually listen for changes
      // In a real implementation, you would set up event listeners
      const currentUserStr = localStorage.getItem('currentUser');
      if (currentUserStr) {
        const currentUser = JSON.parse(currentUserStr);
        callback('SIGNED_IN', { user: currentUser });
      }
      
      return {
        data: {
          subscription: {
            unsubscribe: () => {}
          }
        }
      };
    },
    signOut: async () => {
      localStorage.removeItem('currentUser');
      localStorage.removeItem('lastLoginTime');
      return { error: null };
    }
  }
};

// Export the appropriate client based on the environment
export default isElectron ? localApi : supabase;
